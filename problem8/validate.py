import sys, os, re
import signal
import random
import argparse
from twisted.internet import reactor, protocol
import numpy as np
import gradientDescent as gd
import gradientDescentII as gdII
from sklearn import preprocessing
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

actual = np.array([
  0.0,-0.03,-0.06,0.03,-0.05,0.06,-0.04,-0.01,0.07,0.07,0.5,0.01,-0.04,0.02,-0.05,0.0,-0.04,0.02,-0.01,0.0,0.02,-0.03,0.0,-0.04,-0.03,-0.01,0.05,-0.08,-0.02,-0.06,-0.32,-0.03,0.04,-0.01,0.02,0.05,0.03,-0.04,0.01,0.0
  ])
bw = np.array([
0.00905609836632,-0.252496000415,-0.0283516267153,0.223086879022,0.13013169427,0.117589716645,-0.126548576378,-0.101403158906,0.0336063214247,0.137021570108,0.929966797032,0.177478672458,-0.246663167974,-0.104547167476,-0.273454066454,-0.229013198488,-0.129111150212,-0.252263021043,0.206535419812,-0.234701523369,0.325705839289,0.0501504451844,0.681440018799,0.15706227879,-0.100564777377,-0.0921699613823,0.622761717492,-0.01979535569,-0.375019754162,0.0801663942905,-0.315209393193,0.17311442361,0.278112702144,-0.44047991965,0.278049847152,-0.105924817006,0.0757514034145,0.495923506073,0.230295312852,-0.175224030763
  ])
vw = np.array([
-0.0179332113351,-0.0250601837468,-0.054558397604,0.0150813167795,0.0149742266209,-0.00926145195458,-0.0894506302201,0.00607903963978,-0.0497070790264,-0.0117395768847,0.22925379729,0.081690066156,-0.12257741734,0.0518926822112,-0.0741538287302,0.0365315626996,-0.0532109184898,0.00102903796237,-0.042035488614,-0.0425080925873,0.0645222728772,-0.0502296203084,0.0108928814,-0.0374409951771,-0.0558749345488,-0.0211532213257,0.161866255034,-0.00790731317071,-0.0560495927742,-0.022815895784,-0.158401897777,-0.0052185476908,0.130036480204,-0.0676213811774,0.0457279157631,0.083258090719,-0.00435776395717,0.0536927849021,0.0379636040175,-0.0194097433524
  ])



diff_b = np.apply_along_axis(lambda x:x[0]*x[1], 1, zip(actual, bw))
diff_v = np.apply_along_axis(lambda x:x[0]*x[1], 1, zip(actual, vw))
accu_b = len(np.where(diff_b>0)[0])/float(len(diff_b))
accu_v = len(np.where(diff_v>0)[0])/float(len(diff_v))
print "Binary Sign Accuracy:", accu_b, "Value Sign Accuracy:", accu_v
print "diff\n", (actual-vw)